---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Conditions:
  CreateProdResources: !Equals [ !Ref Environment, prod ]

Resources:

  #  _   _ _____ _______        _____  ____  _  __
  # | \ | | ____|_   _\ \      / / _ \|  _ \| |/ /
  # |  \| |  _|   | |  \ \ /\ / / | | | |_) | ' /
  # | |\  | |___  | |   \ V  V /| |_| |  _ <| . \
  # |_| \_|_____| |_|    \_/\_/  \___/|_| \_\_|\_\

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

  #  ___ _   _ _____ _____ ____  _   _ _____ _____
  # |_ _| \ | |_   _| ____|  _ \| \ | | ____|_   _|
  #  | ||  \| | | | |  _| | |_) |  \| |  _|   | |
  #  | || |\  | | | | |___|  _ <| |\  | |___  | |
  # |___|_| \_| |_| |_____|_| \_\_| \_|_____| |_|
  #
  #   ____    _  _____ _______        ___ __   __
  #  / ___|  / \|_   _| ____\ \      / / \\ \ / /
  # | |  _  / _ \ | | |  _|  \ \ /\ / / _ \\ V /
  # | |_| |/ ___ \| | | |___  \ V  V / ___ \| |
  #  \____/_/   \_\_| |_____|  \_/\_/_/   \_\_|

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #  ____  _   _ ____  _   _ _____ _____
  # / ___|| | | | __ )| \ | | ____|_   _|
  # \___ \| | | |  _ \|  \| |  _|   | |
  #  ___) | |_| | |_) | |\  | |___  | |
  # |____/ \___/|____/|_| \_|_____| |_|

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.30.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.192.31.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ2)

  #  _   _    _  _____    ____    _  _____ _______        ___ __   __
  # | \ | |  / \|_   _|  / ___|  / \|_   _| ____\ \      / / \\ \ / /
  # |  \| | / _ \ | |   | |  _  / _ \ | | |  _|  \ \ /\ / / _ \\ V /
  # | |\  |/ ___ \| |   | |_| |/ ___ \| | | |___  \ V  V / ___ \| |
  # |_| \_/_/   \_\_|    \____/_/   \_\_| |_____|  \_/\_/_/   \_\_|

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Routes

  #  ____   ___  _   _ _____ _____   _____  _    ____  _     _____
  # |  _ \ / _ \| | | |_   _| ____| |_   _|/ \  | __ )| |   | ____|
  # | |_) | | | | | | | | | |  _|     | | / _ \ |  _ \| |   |  _|
  # |  _ <| |_| | |_| | | | | |___    | |/ ___ \| |_) | |___| |___
  # |_| \_\\___/ \___/  |_| |_____|   |_/_/   \_\____/|_____|_____|

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  #  ____  _____ ____ _   _ ____  ___ _______   __   ____ ____   ___  _   _ ____
  # / ___|| ____/ ___| | | |  _ \|_ _|_   _\ \ / /  / ___|  _ \ / _ \| | | |  _ \
  # \___ \|  _|| |   | | | | |_) || |  | |  \ V /  | |  _| |_) | | | | | | | |_) |
  #  ___) | |__| |___| |_| |  _ < | |  | |   | |   | |_| |  _ <| |_| | |_| |  __/
  # |____/|_____\____|\___/|_| \_\___| |_|   |_|    \____|_| \_\\___/ \___/|_|

  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub ${Environment}-public-security-group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Public 443"
        - IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Public 80"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-security-group

  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub ${Environment}-private-security-group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref PublicSecurityGroup
          Description: "PublicSecurityGroupToPrivateSecurityGroup"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-security-group
  PrivateSecurityGroupIngress:
    DependsOn: PrivateSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      # Private間はすべての通信を許可
      GroupId: !Ref PrivateSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref PrivateSecurityGroup

  #  _____ _           _   _         ____            _        _
  # | ____| | __ _ ___| |_(_) ___   / ___|___  _ __ | |_ __ _(_)_ __   ___ _ __
  # |  _| | |/ _` / __| __| |/ __| | |   / _ \| '_ \| __/ _` | | '_ \ / _ \ '__|
  # | |___| | (_| \__ \ |_| | (__  | |__| (_) | | | | || (_| | | | | |  __/ |
  # |_____|_|\__,_|___/\__|_|\___|  \____\___/|_| |_|\__\__,_|_|_| |_|\___|_|
  #
  #  ____                  _
  # / ___|  ___ _ ____   _(_) ___ ___
  # \___ \ / _ \ '__\ \ / / |/ __/ _ \
  #  ___) |  __/ |   \ V /| | (_|  __/
  # |____/ \___|_|    \_/ |_|\___\___|

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ApplicationLoadBalancer
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE                   # FARGATE or EC2
      LoadBalancers:
        - ContainerName: httpd-container
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 30
      # DeploymentConfiguration:
      #   DeploymentConfiguration
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref PublicSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      # PlacementConstraints:
       # - PlacementConstraints, ...
      # PlacementStrategies:
       # - PlacementStrategies, ...
      # PlatformVersion: String
      # Role: String
      # ServiceRegistries:
       # - ServiceRegistry
      TaskDefinition: !Ref ECSTaskDefinition

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Family: 'httpd-task'
      Memory: 1024
      NetworkMode: awsvpc
      # Volumes:
      #   - Volume Definition
      # PlacementConstraints:
      #   - TaskDefinitionPlacementConstraint
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - # Cpu: 0
          # DisableNetworking: Boolean
          # DnsSearchDomains:
          #   - 文字列
          # DnsServers:
          #   - 文字列
          # DockerLabels:
          #   文字列: 文字列
          # DockerSecurityOptions:
          #   - 文字列
          # EntryPoint:
          #   - 文字列
          # Environment:
          #   - KeyValuePair
          Essential: true
          # ExtraHosts:
          #   - HostEntry
          # HealthCheck:
          #   HealthCheck
          # Hostname: String
          Image: httpd
          # Links:
          #   - 文字列
          # LinuxParameters:
          #   LinuxParameters
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${AWS::StackName}
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          # Memory: 128
          MemoryReservation: 300
          # MountPoints:
          #   - MountPoint
          Name: httpd-container
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
          # Privileged: Boolean
          # ReadonlyRootFilesystem: Boolean
          # Ulimits:
          #   - Ulimit
          # User: String
          # VolumesFrom:
          #   - VolumeFrom
          # WorkingDirectory: String

  CloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}
      RetentionInDays: 14 # 2週間

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Environment}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: !Sub ${Environment}-ecs-task-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  #     _                _ _           _   _               _                    _
  #    / \   _ __  _ __ | (_) ___ __ _| |_(_) ___  _ __   | |    ___   __ _  __| |
  #   / _ \ | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \  | |   / _ \ / _` |/ _` |
  #  / ___ \| |_) | |_) | | | (_| (_| | |_| | (_) | | | | | |__| (_) | (_| | (_| |
  # /_/   \_\ .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_| |_____\___/ \__,_|\__,_|
  #         |_|   |_|
  #  ____        _
  # | __ )  __ _| | __ _ _ __   ___ ___ _ __
  # |  _ \ / _` | |/ _` | '_ \ / __/ _ \ '__|
  # | |_) | (_| | | (_| | | | | (_|  __/ |
  # |____/ \__,_|_|\__,_|_| |_|\___\___|_|

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Environment}-web-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicSecurityGroup
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Environment}-web-target-group
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Tags:
        - Key: Name
          Value: alb

Outputs:
  ApplicationLoadBalancerEndpointURL:
    Description: ALB Endpoint URL
    Value:
      !Join
        - ""
        -
          - "http://"
          - !GetAtt ApplicationLoadBalancer.DNSName
